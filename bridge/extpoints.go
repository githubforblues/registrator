// generated by go-extpoints -- DO NOT EDIT
package bridge

import (
	"reflect"
	"sync"
)

var registry = struct {
	sync.Mutex
	extpoints map[string]*extensionPoint
}{
	extpoints: make(map[string]*extensionPoint),
}

type extensionPoint struct {
	sync.Mutex
	iface      reflect.Type
	components map[string]interface{}
}

//初始化阶段执行的函数
func newExtensionPoint(iface interface{}) *extensionPoint {
	ep := &extensionPoint{
		iface:      reflect.TypeOf(iface).Elem(),
		components: make(map[string]interface{}),
	}
	registry.Lock()
	defer registry.Unlock()
	registry.extpoints[ep.iface.Name()] = ep
	return ep
}

func (ep *extensionPoint) lookup(name string) (ext interface{}, ok bool) {
	ep.Lock()
	defer ep.Unlock()
	ext, ok = ep.components[name]
	return
}

func (ep *extensionPoint) all() map[string]interface{} {
	ep.Lock()
	defer ep.Unlock()
	all := make(map[string]interface{})
	for k, v := range ep.components {
		all[k] = v
	}
	return all
}

//将后端存储注册到register变量中
func (ep *extensionPoint) register(component interface{}, name string) bool {
	ep.Lock()
	defer ep.Unlock()
	//利用反射获取后端存储结构体的名称
	if name == "" {
		name = reflect.TypeOf(component).Elem().Name()
	}
	_, exists := ep.components[name]
	if exists {
		return false
	}
	//注册
	ep.components[name] = component
	return true
}

func (ep *extensionPoint) unregister(name string) bool {
	ep.Lock()
	defer ep.Unlock()
	_, exists := ep.components[name]
	if !exists {
		return false
	}
	delete(ep.components, name)
	return true
}

//判断注册上来的结构体是否实现了注册上来的接口，返回实现的接口的接口名的数组
func implements(component interface{}) []string {
	var ifaces []string
	//该注册机制为双向注册，在项目启动初始化阶段，AdapterFactory接口就已经注册上来了
	//此处遍历整个registry.extpoints，可以理解为，该注册机制支持多对多注册，即多个接口和多个实现的注册
	for name, ep := range registry.extpoints {
		if reflect.TypeOf(component).Implements(ep.iface) {
			ifaces = append(ifaces, name)
		}
	}
	return ifaces
}

//用于被各个后端存储服务的init函数调用，从而将它们注册上来
func Register(component interface{}, name string) []string {
	registry.Lock()
	defer registry.Unlock()
	var ifaces []string
	//返回后端存储的Factory结构体所实现的接口名
	for _, iface := range implements(component) {
		//调用extensionPoint的register方法进行注册
		if ok := registry.extpoints[iface].register(component, name); ok {
			ifaces = append(ifaces, iface)
		}
	}
	return ifaces
}

func Unregister(name string) []string {
	registry.Lock()
	defer registry.Unlock()
	var ifaces []string
	for iface, extpoint := range registry.extpoints {
		if ok := extpoint.unregister(name); ok {
			ifaces = append(ifaces, iface)
		}
	}
	return ifaces
}

// AdapterFactory

var AdapterFactories = &adapterFactoryExt{
	newExtensionPoint(new(AdapterFactory)),
}

type adapterFactoryExt struct {
	*extensionPoint
}

func (ep *adapterFactoryExt) Unregister(name string) bool {
	return ep.unregister(name)
}

func (ep *adapterFactoryExt) Register(component AdapterFactory, name string) bool {
	return ep.register(component, name)
}

func (ep *adapterFactoryExt) Lookup(name string) (AdapterFactory, bool) {
	ext, ok := ep.lookup(name)
	if !ok {
		return nil, ok
	}
	return ext.(AdapterFactory), ok
}

func (ep *adapterFactoryExt) All() map[string]AdapterFactory {
	all := make(map[string]AdapterFactory)
	for k, v := range ep.all() {
		all[k] = v.(AdapterFactory)
	}
	return all
}
